version: "3.8"

services:
  # Node Exporter for OS metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - "--path.rootfs=/host/rootfs"
      - "--path.sysfs=/host/sys"
      - "--path.procfs=/host/proc"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /:/host/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
    networks:
      - app-network
    ports:
      - "9100:9100"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    networks:
      - app-network
    ports:
      - "8080:8080"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - app-network
    ports:
      - "9090:9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - app-network
    ports:
      - "3000:3000"

  # .NET Application Service
  web:
    image: feerdus95/academianovit:${IMAGE_TAG:-development}
    deploy:
      replicas: 5
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=academianovitdb;Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-postgres123}
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - db

  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    deploy:
      placement:
        constraints: [node.role == manager]
    environment:
      POSTGRES_DB: academianovitdb
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
