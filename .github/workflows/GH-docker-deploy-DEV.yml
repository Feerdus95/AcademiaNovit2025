name: Deploy DEV (Production Server)

on:
  push:
    branches: [development]

  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy"
        required: true
        default: "development"

env:
  REGISTRY: docker.io
  IMAGE_NAME: feerdus95/academianovit
  DEFAULT_TAG: development

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Re-tag images in registry
        run: |
          TAG="${{ steps.set_tag.outputs.tag }}"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backup-$TIMESTAMP
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backup-$TIMESTAMP

      - name: Setup SSH with DNS fix
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to /etc/hosts to fix DNS
          echo "Adding host to /etc/hosts..."
          echo "54.172.225.3 ${{ secrets.SSH_HOST }}" | sudo tee -a /etc/hosts

          # Verify it was added
          cat /etc/hosts | grep "${{ secrets.SSH_HOST }}"

          # Test DNS resolution
          ping -c 1 ${{ secrets.SSH_HOST }} || true

          # SSH config
          cat > ~/.ssh/config << 'EOF'
          Host deploy-server
            HostName ${{ secrets.SSH_HOST }}
            Port ${{ secrets.SSH_PORT }}
            User ${{ secrets.SSH_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ConnectTimeout=60
            ServerAliveInterval=30
            ServerAliveCountMax=3
            LogLevel ERROR
          EOF
          chmod 600 ~/.ssh/config

      - name: Test connection with retry
        run: |
          echo "Waiting for DNS to propagate..."
          sleep 5

          echo "Testing connection..."
          for i in {1..3}; do
            if ssh deploy-server "echo 'Connection successful'"; then
              echo "Connected on attempt $i"
              break
            else
              echo "Failed attempt $i, retrying in 10s..."
              sleep 10
            fi
          done

      - name: Copy files
        run: |
          scp docker-compose.yml deploy-server:~/
          scp docker-swarm.yml deploy-server:~/

      - name: Deploy to Production
        env:
          DEPLOY_TAG: ${{ steps.set_tag.outputs.tag }}
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          ssh deploy-server << 'ENDSSH'
            set -e
            
            echo "=== Starting deployment ==="
            echo "Tag: $DEPLOY_TAG"
            
            # Login to Docker Hub
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
            
            # Pull image
            docker pull $REGISTRY/$IMAGE_NAME:$DEPLOY_TAG
            
            # Deploy with docker-compose
            docker-compose down 2>/dev/null || true
            docker-compose up -d
            
            # Show containers
            docker ps
            
            # Deploy with Swarm
            export IMAGE_TAG=$DEPLOY_TAG
            docker stack deploy -c docker-swarm.yml academia-novit
            
            # Wait
            sleep 15
            
            # Show services
            docker service ls
            
            echo "=== Deployment completed ==="
          ENDSSH
