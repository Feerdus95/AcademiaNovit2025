name: Deploy to DEV with Docker Swarm

on:
  push:
    branches: [development]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy"
        required: true
        default: "development"

defaults:
  run:
    shell: bash

env:
  IMAGE_NAME: feerdus95/academianovit # Cambiar para coincidir con docker-swarm.yml
  DEFAULT_TAG: development
  SSH_OPTS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH connection
        run: |
          set -ex

          echo "üöÄ Setting up SSH connection..."

          # Create .ssh directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Save private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Test connectivity to the custom port
          echo "üîç Testing connectivity to ${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}"

          # Add server to known_hosts using the correct port
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          # Test SSH connection
          ssh $SSH_OPTS -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo '‚úÖ SSH connection successful!'"

      - name: Copy files to server
        run: |
          set -e

          # Save Docker image to tar file
          IMAGE_TAR="${{ env.IMAGE_NAME }}.tar"
          echo "üíæ Saving Docker image..."
          docker save -o $IMAGE_TAR ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.tag }}

          # Copy files to server
          echo "üì§ Transferring files..."
          scp $SSH_OPTS -P ${{ secrets.SSH_PORT }} \
            $IMAGE_TAR \
            docker-compose.yml \
            docker-swarm.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/

      - name: Deploy with Docker Swarm
        env:
          DEPLOY_TAG: ${{ steps.set_tag.outputs.tag }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          ssh $SSH_OPTS -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << ENDSSH
            set -e
            
            echo "üöÄ Starting deployment..."
            
            # Load the Docker image
            docker load -i ~/feerdus95/academianovit.tar
            
            # Set environment variables for Docker Swarm
            export IMAGE_TAG=$DEPLOY_TAG
            export DB_USER=$DB_USER
            export DB_PASSWORD=$DB_PASSWORD
            
            # Stop existing services
            docker-compose down 2>/dev/null || true
            docker stack rm academia-novit 2>/dev/null || true
            sleep 10
            
            # Initialize Docker Swarm if needed
            if ! docker node ls &>/dev/null; then
              echo "üêù Initializing Docker Swarm..."
              docker swarm init --advertise-addr $(hostname -I | awk '{print $1}')
            fi
            
            # Deploy with Docker Swarm
            echo "üöÄ Deploying with Docker Swarm..."
            docker stack deploy -c docker-swarm.yml academia-novit
            
            # Wait and show status
            echo "‚è≥ Waiting for services..."
            sleep 20
            
            docker service ls
            docker service ps academia-novit_web --no-trunc
            
            echo "‚úÖ Deployment completed!"
          ENDSSH
