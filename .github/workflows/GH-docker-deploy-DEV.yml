name: Deploy to Production

on:
  push:
    branches: [development]
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (default: latest)"
        required: false
        default: "latest"

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/academianovit
  TAG: ${{ github.event.inputs.tag || 'latest' }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ secrets.SSH_PORT }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to production
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          TAG: ${{ env.TAG }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
        run: |
          # Create necessary directories
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST \
            "mkdir -p ~/academianovit/config ~/academianovit/data"

          # Copy docker-swarm.yml to server
          scp -P $SSH_PORT docker-swarm.yml $SSH_USER@$SSH_HOST:~/academianovit/

          # Login to Docker Hub on the server
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST \
            "echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin"

          # Deploy stack
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST \
            "cd ~/academianovit && \
             docker stack deploy -c docker-swarm.yml academianovit --with-registry-auth && \
             docker service update --force academianovit_web \
               --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} \
               --with-registry-auth"

          # Verify deployment
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST \
            "docker service ls | grep academianovit && \
             docker service ps academianovit_web --no-trunc"
