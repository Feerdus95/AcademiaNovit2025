name: Deploy to Production Environment

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Source image tag to re-tag and deploy (e.g., latest, v1.0.0)"
        required: true
        default: "latest"

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/academianovit

jobs:
  retag-and-deploy:
    name: Re-tag and Deploy to DEV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set deployment tag
        id: set_tag
        run: |
          SOURCE_TAG="${{ github.event.inputs.source_tag }}"
          DEPLOY_TAG="deploy-$(date +%Y%m%d-%H%M%S)"
          echo "source_tag=${SOURCE_TAG}" >> $GITHUB_OUTPUT
          echo "deploy_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT
          echo "📝 Source tag: ${SOURCE_TAG}"
          echo "📝 Deploy tag: ${DEPLOY_TAG}"

      - name: Re-tag and push Docker image
        run: |
          # Pull the source image
          echo "🔍 Pulling source image from Docker Hub..."
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.source_tag }}

          # Create new tags
          echo "🏷️ Creating new tags..."
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.source_tag }} ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.deploy_tag }}
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.source_tag }} ${{ env.IMAGE_NAME }}:latest

          # Push all tags to Docker Hub
          echo "📤 Pushing images to Docker Hub..."
          docker push ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.deploy_tag }}
          docker push ${{ env.IMAGE_NAME }}:latest

          echo "✅ Image re-tagging and pushing completed!"
          echo "   - Source: ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.source_tag }}"
          echo "   - New Tag: ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.deploy_tag }}"
          echo "   - Latest: ${{ env.IMAGE_NAME }}:latest"

      - name: Copy docker-compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/academianovit/"
          overwrite: true

      - name: Deploy to production server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            echo "🚀 Starting production deployment..."
            cd ~/academianovit

            # Set environment variables
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export IMAGE_TAG="${{ steps.set_tag.outputs.deploy_tag }}"

            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Stop and clean up existing containers
            echo "🛑 Stopping existing containers..."
            docker-compose down --remove-orphans || true

            echo "🧹 Cleaning up unused resources..."
            docker system prune -af --volumes

            # Pull the newly tagged image
            echo "📥 Pulling new image from Docker Hub..."
            docker pull ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.deploy_tag }}

            # Start services
            echo "🚀 Starting services with docker-compose..."
            docker-compose up -d --remove-orphans

            # Verify deployment
            echo "⏳ Waiting for services to start..."
            sleep 30

            echo "📊 Service Status:"
            docker-compose ps

            # Health check
            echo "🔍 Running health checks..."
            if curl -f http://localhost:80 > /dev/null 2>&1; then
              echo "✅ Web service is responding on port 80"
            else
              echo "❌ Web service not responding on port 80"
              echo "📋 Container logs:"
              docker-compose logs --tail=50
              exit 1
            fi

            echo "🐳 Docker containers:"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo "✅ Deployment completed successfully!"
            echo "📝 Deployed version: ${{ steps.set_tag.outputs.deploy_tag }}"
            echo "🔗 Image: ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.deploy_tag }}"
