name: Deploy DEV (Production Server)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (e.g., latest, development)"
        required: true
        default: "development"

env:
  REGISTRY: docker.io
  IMAGE_NAME: feerdus95/academianovit
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ secrets.SSH_PORT }}

jobs:
  retag-and-deploy:
    runs-on: ubuntu-latest
    env:
      TAG: ${{ github.event.inputs.tag }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # NEW: Re-tag current images in registry
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Re-tag current images
        run: |
          # Pull current image
          docker pull $REGISTRY/$IMAGE_NAME:$TAG

          # Re-tag with timestamp to keep history
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/$IMAGE_NAME:$TAG-$TIMESTAMP
          docker tag $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/$IMAGE_NAME:latest

          # Push re-tagged images
          docker push $REGISTRY/$IMAGE_NAME:$TAG-$TIMESTAMP
          docker push $REGISTRY/$IMAGE_NAME:latest

      - name: Setup SSH access
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$SSH_PORT" -H "$SSH_HOST" >> ~/.ssh/known_hosts

      # MODIFIED: Copy both docker-compose files
      - name: Copy Docker files to server
        run: |
          scp -P "$SSH_PORT" docker-compose.yml "$SSH_USER@$SSH_HOST:/home/$SSH_USER/docker-compose.yml"
          scp -P "$SSH_PORT" docker-swarm.yml "$SSH_USER@$SSH_HOST:/home/$SSH_USER/docker-swarm.yml"

      # MODIFIED: Deploy with docker-compose first, then Swarm
      - name: Deploy to Production
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << EOF
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # Pull new images from registry
            docker pull $REGISTRY/$IMAGE_NAME:latest
            
            # Deploy with docker-compose (requirement fulfillment)
            docker-compose down || true
            docker-compose up -d
            
            # Verify containers are running
            docker ps
            
            # Deploy with Docker Swarm (5 replicas as per requirement)
            docker stack deploy -c docker-swarm.yml academia-novit
            
            # Verify Swarm services
            docker service ls
            docker service ps academia-novit_web
          EOF
