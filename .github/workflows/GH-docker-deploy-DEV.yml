name: Deploy DEV (Production Server)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - latest

env:
  REGISTRY: docker.io
  IMAGE_NAME: feerdus95/academianovit

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Re-tag images in registry
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          # Pull current image
          docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG

          # Re-tag with timestamp for backup
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag $REGISTRY/$IMAGE_NAME:$IMAGE_TAG $REGISTRY/$IMAGE_NAME:backup-$TIMESTAMP

          # Push backup image
          docker push $REGISTRY/$IMAGE_NAME:backup-$TIMESTAMP

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker files to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/docker-compose.yml
          scp -P ${{ secrets.SSH_PORT }} docker-swarm.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/docker-swarm.yml

      - name: Deploy to Production
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull the new image
            docker pull feerdus95/academianovit:${{ github.event.inputs.image_tag }}
            
            # Stop existing containers
            docker-compose down || true
            
            # Run with docker-compose
            docker-compose up -d
            
            # Show running containers
            echo "=== Docker containers status ==="
            docker ps
            
            # Deploy with Docker Swarm (5 replicas)
            IMAGE_TAG=${{ github.event.inputs.image_tag }} docker stack deploy -c docker-swarm.yml academia-novit
            
            # Wait for services to start
            sleep 10
            
            # Show swarm services
            echo "=== Docker Swarm services ==="
            docker service ls
            docker service ps academia-novit_web
          EOF
